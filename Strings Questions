#LENGTH OF STRING:
#include<iostream>
using namespace std;

int getLength(char name[]){
    int count =0;
    for(int i=0;name[i]!='\0';i++){
        count++;
    }
    return count;
}
int main(){
    char name[20];

    cout<<"enter your name: "<<endl;
    cin>>name;

    cout<<" Your name is : ";
    cout<<name <<endl;

    cout<<"Length : "<<getLength(name)<<endl;

    return 0;
}

REVERSE A STRING :
#include<iostream>
using namespace std;

void reverse(char name[],int n){
    int s=0;
    int e=n-1;

    while(s<e){
        swap(name[s++],name[e--]);

    }
}

int main(){
    char name[20];
    
    cout<<"enter your name: "<<endl;
    cin>>name;
    
    reverse(name,len);
    cout<<"your name is :";
    cout<<name<<endl;
    return 0;
}

CHECK PALINDROME OR NOT :
#include<iostream>
using namespace std;

bool checkPalindrome(char a[],int n){
    int s=0;
    int e=n-1;
    while(s<=e){
        if(a[s]!=a[e]){
            return 0;
        }
        else{
            s++;
            e--;
        }
    }
    return 1;
}
int main(){
    char name[20];
    
    cout<<"enter your name: "<<endl;
    cin>>name;
    
    cout<<" Your name is : ";
    cout<<name <<endl;
    

    cout<<"Palindrome or no :"<<checkPalindrome(name,len)<<endl;
    return 0;
}

CHECK VALID PALINDROME :
class Solution {
private:
   bool valid(char ch){
     if((ch>='a'&& ch<='z' )||(ch>='A'&& ch<='Z')||(ch>='0'&& ch<='9')){
            return 1;
        }
        return 0;
        
   }
   char toLowerCase(char ch){
    if((ch>='a' && ch<='z')||(ch>='0' && ch<='9')){
        return ch;
    }
    else{
        char temp=ch-'A'+'a';
        return temp;
    }
}
bool checkPalindrome(string a){
    int s=0;
    int e=a.length()-1;
    while(s<=e){
        if(a[s]!=a[e]){
            return 0;
        }
        else{
            s++;
            e--;
        }
    }
    return 1;
}
public:
    bool isPalindrome(string s) {

      
        string temp="";

        for(int j=0;j<s.length();j++){
            if(valid(s[j])){
                temp.push_back(s[j]);
            }
        }
          for(int j=0;j<s.length();j++){
            temp[j]=toLowerCase(temp[j]);
    }    
    return checkPalindrome(temp);
    }
};

GET MAXIMUM OCCURENCES OF A CHARACTER IN A STRING :
#include<iostream>
using namespace std;
 
char getMaxOccCharacter(string s){

    int arr[26]={0};

    for(int i=0;i<s.length();i++){
        char ch=s[i];

        int number=0;
        number=ch-'a';
        arr[number]++;
    }
    int maxi=-1,ans=0;
    for(int i=0;i<26;i++){
        if(maxi<arr[i]){
            ans=i;
            maxi=arr[i];
        }
    }
    return 'a'+ans;
}
int main(){
    string s;
    cin>>s;
    cout<<getMaxOccCharacter(s)<<endl;
}


REMOVE ALL OCCURENCES OF AA SUBSTRING FROM STRING :
class Solution {
public:
    string removeOccurrences(string s, string part) {
        while(s.length()!=0 && s.find(part)<s.length()){
            s.erase(s.find(part),part.length());
        }
        return s;
    }
};

PERMUTATION OF A STRING :
class Solution {
 private:
    bool checkEqual(int a[26],int b[26]){
        for(int i=0;i<26;i++){
            if(a[i]!=b[i])
               return 0;
        }
        return 1;
    }
public:
    bool checkInclusion(string s1, string s2) {
        //character count array:
        int count[26]={0};

        for(int i=0;i<s1.length();i++){
            int index=s1[i]-'a';
            count[index]++;
        } 
        //traverse s2 string in window of size s1 length and compare

        int i=0;
        int windowSize=s1.length();
        int count2[26]={0};
        //running for first window
        while(i<windowSize && i<s2.length()){
            int index=s2[i]-'a';
            count2[index]++;
            i++;
        }
        if(checkEqual(count,count2))
           return 1;

        while(i<s2.length()){
            char newChar=s2[i];
            int index=newChar-'a';
            count2[index]++;

            char oldChar=s2[i-windowSize];
            index=oldChar-'a';
            count2[index]--;
               i++;
            if(checkEqual(count,count2))
            return 1;
        }
        return 0;
    }
};
